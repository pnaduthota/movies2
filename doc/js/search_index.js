var search_data = {"index":{"searchIndex":["movie","moviedata","movietest","user","add()","add_user()","fix_prediction()","fix_rating()","generate_results()","get_movie_ratings()","get_prediction()","get_users()","load_data()","mean()","mean_error()","movies()","new()","new()","new()","new()","predict()","rating()","rms()","run_test()","separate_data()","stddev()","to_a()","viewers()"],"longSearchIndex":["movie","moviedata","movietest","user","user#add()","movie#add_user()","user#fix_prediction()","movie#fix_rating()","moviedata#generate_results()","user#get_movie_ratings()","user#get_prediction()","movie#get_users()","moviedata#load_data()","movietest#mean()","movietest#mean_error()","moviedata#movies()","movie::new()","moviedata::new()","movietest::new()","user::new()","moviedata#predict()","moviedata#rating()","movietest#rms()","moviedata#run_test()","moviedata#separate_data()","movietest#stddev()","movietest#to_a()","moviedata#viewers()"],"info":[["Movie","","Movie.html","",""],["MovieData","","MovieData.html","",""],["MovieTest","","MovieTest.html","",""],["User","","User.html","",""],["add","User","User.html#method-i-add","(movie, rating)","<p>add a movie and a rating to the user&#39;s rating map adjust prediction for\nfuture movies\n"],["add_user","Movie","Movie.html#method-i-add_user","(user_id)","<p>add to array of users who have reviewed the movie\n"],["fix_prediction","User","User.html#method-i-fix_prediction","(rating)","<p>fix/update the prediction by re-averaging update total ratings by\nincrementing\n"],["fix_rating","Movie","Movie.html#method-i-fix_rating","(new_rating)","<p>re-adjust the average rating of the movie\n"],["generate_results","MovieData","MovieData.html#method-i-generate_results","()",""],["get_movie_ratings","User","User.html#method-i-get_movie_ratings","()",""],["get_prediction","User","User.html#method-i-get_prediction","()",""],["get_users","Movie","Movie.html#method-i-get_users","()",""],["load_data","MovieData","MovieData.html#method-i-load_data","()","<p>def MovieData.initialize(foldername, flag)\n<p>end\n"],["mean","MovieTest","MovieTest.html#method-i-mean","(new_array)","<p>gest the average of an array\n"],["mean_error","MovieTest","MovieTest.html#method-i-mean_error","()","<p>average prediction error\n"],["movies","MovieData","MovieData.html#method-i-movies","(user_id)",""],["new","Movie","Movie.html#method-c-new","(name)","<p>create a new movie start with an average rating of 0 initialize array of\nusers that have rated movie …\n"],["new","MovieData","MovieData.html#method-c-new","(foldername)",""],["new","MovieTest","MovieTest.html#method-c-new","(results)",""],["new","User","User.html#method-c-new","(id)","<p>create a new user get the id, start a new map of movies to ratings, keep\ntrack of prediction and number …\n"],["predict","MovieData","MovieData.html#method-i-predict","(user_id)",""],["rating","MovieData","MovieData.html#method-i-rating","(user_id, movie_id)",""],["rms","MovieTest","MovieTest.html#method-i-rms","()","<p>root mean square of error\n"],["run_test","MovieData","MovieData.html#method-i-run_test","(k)",""],["separate_data","MovieData","MovieData.html#method-i-separate_data","(num)","<p>take each line, separate to numbers, and store lines\n"],["stddev","MovieTest","MovieTest.html#method-i-stddev","()","<p>standard deviation of prediction error\n"],["to_a","MovieTest","MovieTest.html#method-i-to_a","()","<p>returns results in array form\n"],["viewers","MovieData","MovieData.html#method-i-viewers","(movie_id)",""]]}}